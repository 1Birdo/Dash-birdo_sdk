{"version":3,"file":"browser.js","sources":["../src/browser.js","../src/node.js","../src/index.js"],"sourcesContent":["export class BrowserMonitor {\r\n  constructor(sdk) {\r\n    this.sdk = sdk;\r\n    this._systemInfo = this._getSystemInfo();\r\n  }\r\n\r\n  _getSystemInfo() {\r\n    return {\r\n      platform: 'browser',\r\n      userAgent: navigator.userAgent,\r\n      screenResolution: `${window.screen.width}x${window.screen.height}`,\r\n      language: navigator.language,\r\n      hardwareConcurrency: navigator.hardwareConcurrency || 0,\r\n      deviceMemory: navigator.deviceMemory || 0\r\n    };\r\n  }\r\n\r\n  getSystemInfo() {\r\n    return this._systemInfo;\r\n  }\r\n\r\n  async collectMetrics() {\r\n    try {\r\n      const memory = performance.memory ? {\r\n        jsHeapSizeLimit: performance.memory.jsHeapSizeLimit,\r\n        totalJSHeapSize: performance.memory.totalJSHeapSize,\r\n        usedJSHeapSize: performance.memory.usedJSHeapSize\r\n      } : null;\r\n\r\n      return {\r\n        timestamp: new Date().toISOString(),\r\n        memory,\r\n        performance: {\r\n          timing: this._getTimingMetrics(),\r\n          navigation: this._getNavigationMetrics()\r\n        },\r\n        connection: this._getConnectionInfo()\r\n      };\r\n    } catch (error) {\r\n      this.sdk.logger.error('Failed to collect browser metrics:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  _getTimingMetrics() {\r\n    const timing = performance.timing;\r\n    if (!timing) return null;\r\n    \r\n    return {\r\n      dns: timing.domainLookupEnd - timing.domainLookupStart,\r\n      tcp: timing.connectEnd - timing.connectStart,\r\n      request: timing.responseStart - timing.requestStart,\r\n      response: timing.responseEnd - timing.responseStart,\r\n      domLoading: timing.domLoading - timing.navigationStart,\r\n      domInteractive: timing.domInteractive - timing.navigationStart,\r\n      domComplete: timing.domComplete - timing.navigationStart,\r\n      loadEvent: timing.loadEventEnd - timing.loadEventStart\r\n    };\r\n  }\r\n\r\n  _getNavigationMetrics() {\r\n    const navigation = performance.getEntriesByType('navigation')[0];\r\n    if (!navigation) return null;\r\n    \r\n    return {\r\n      type: navigation.type,\r\n      redirectCount: navigation.redirectCount,\r\n      size: navigation.transferSize,\r\n      duration: navigation.duration\r\n    };\r\n  }\r\n\r\n  _getConnectionInfo() {\r\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\r\n    if (!connection) return null;\r\n    \r\n    return {\r\n      effectiveType: connection.effectiveType,\r\n      rtt: connection.rtt,\r\n      downlink: connection.downlink,\r\n      saveData: connection.saveData\r\n    };\r\n  }\r\n}","import os from 'os';\r\nimport process from 'process';\r\nimport { promises as fs } from 'fs';\r\nimport util from 'util';\r\nimport v8 from 'v8';\r\n\r\nconst exec = util.promisify(require('child_process').exec);\r\n\r\nexport class NodeMonitor {\r\n  constructor(sdk) {\r\n    this.sdk = sdk;\r\n    this._systemInfo = this._getSystemInfo();\r\n    this._prevNetworkStats = null;\r\n    this._prevDiskStats = null;\r\n  }\r\n\r\n  _getSystemInfo() {\r\n    return {\r\n      platform: os.platform(),\r\n      arch: os.arch(),\r\n      release: os.release(),\r\n      hostname: os.hostname(),\r\n      cpuModel: os.cpus()[0]?.model,\r\n      cpuCores: os.cpus().length,\r\n      totalMemory: os.totalmem(),\r\n      nodeVersion: process.version,\r\n      v8Version: process.versions.v8\r\n    };\r\n  }\r\n\r\n  getSystemInfo() {\r\n    return this._systemInfo;\r\n  }\r\n\r\n  async collectMetrics() {\r\n    try {\r\n      const [cpu, memory, disk, network] = await Promise.all([\r\n        this._getCpuMetrics(),\r\n        this._getMemoryMetrics(),\r\n        this._getDiskMetrics(),\r\n        this._getNetworkMetrics()\r\n      ]);\r\n\r\n      return {\r\n        timestamp: new Date().toISOString(),\r\n        cpu,\r\n        memory,\r\n        disk,\r\n        network,\r\n        process: this._getProcessMetrics(),\r\n        load: this._getLoadMetrics()\r\n      };\r\n    } catch (error) {\r\n      this.sdk.logger.error('Failed to collect Node.js metrics:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async _getCpuMetrics() {\r\n    const load = os.loadavg();\r\n    const cpus = os.cpus();\r\n    \r\n    return {\r\n      usage: process.cpuUsage(),\r\n      load1: load[0],\r\n      load5: load[1],\r\n      load15: load[2],\r\n      speed: cpus[0]?.speed || 0,\r\n      cores: cpus.length\r\n    };\r\n  }\r\n\r\n  async _getMemoryMetrics() {\r\n    return {\r\n      system: {\r\n        total: os.totalmem(),\r\n        free: os.freemem(),\r\n        used: os.totalmem() - os.freemem()\r\n      },\r\n      process: process.memoryUsage(),\r\n      heap: v8.getHeapStatistics()\r\n    };\r\n  }\r\n\r\n  async _getDiskMetrics() {\r\n    try {\r\n      const stats = await fs.statfs('/');\r\n      const currentStats = {\r\n        read: (await exec('cat /proc/diskstats')).stdout,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      let readRate = 0;\r\n      if (this._prevDiskStats) {\r\n        const timeDiff = (currentStats.timestamp - this._prevDiskStats.timestamp) / 1000;\r\n        if (timeDiff > 0) {\r\n          // Simple disk read rate calculation\r\n          readRate = (currentStats.read.length - this._prevDiskStats.read.length) / timeDiff;\r\n        }\r\n      }\r\n      this._prevDiskStats = currentStats;\r\n      \r\n      return {\r\n        total: stats.blocks * stats.bsize,\r\n        free: stats.bfree * stats.bsize,\r\n        used: (stats.blocks - stats.bfree) * stats.bsize,\r\n        readRate\r\n      };\r\n    } catch (error) {\r\n      this.sdk.logger.warn('Could not collect detailed disk metrics:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async _getNetworkMetrics() {\r\n    const currentStats = os.networkInterfaces();\r\n    const currentTimestamp = Date.now();\r\n    \r\n    let bytesIn = 0;\r\n    let bytesOut = 0;\r\n    \r\n    if (this._prevNetworkStats) {\r\n      const timeDiff = (currentTimestamp - this._prevNetworkStats.timestamp) / 1000;\r\n      \r\n      Object.keys(currentStats).forEach(iface => {\r\n        const currentIf = currentStats[iface];\r\n        const prevIf = this._prevNetworkStats.stats[iface];\r\n        \r\n        if (prevIf) {\r\n          currentIf.forEach((curr, i) => {\r\n            if (prevIf[i] && curr.address === prevIf[i].address) {\r\n              bytesIn += (curr.bytesReceived - prevIf[i].bytesReceived) / timeDiff;\r\n              bytesOut += (curr.bytesSent - prevIf[i].bytesSent) / timeDiff;\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    this._prevNetworkStats = {\r\n      stats: currentStats,\r\n      timestamp: currentTimestamp\r\n    };\r\n    \r\n    return {\r\n      bytesIn,\r\n      bytesOut,\r\n      interfaces: Object.keys(currentStats)\r\n    };\r\n  }\r\n\r\n  _getProcessMetrics() {\r\n    return {\r\n      uptime: process.uptime(),\r\n      pid: process.pid,\r\n      ppid: process.ppid,\r\n      cpuUsage: process.cpuUsage(),\r\n      memoryUsage: process.memoryUsage()\r\n    };\r\n  }\r\n\r\n  _getLoadMetrics() {\r\n    return {\r\n      avg: os.loadavg(),\r\n      uptime: os.uptime()\r\n    };\r\n  }\r\n}","import { BrowserMonitor } from './browser';\r\nimport { NodeMonitor } from './node';\r\n\r\nclass Birdo {\r\n  constructor(options = {}) {\r\n    this.apiKey = options.apiKey;\r\n    this.serverName = options.serverName;\r\n    this.endpoint = options.endpoint || 'https://dashboard.birdo.uk';\r\n    this.interval = options.interval || 5000; // ms\r\n    this.maxRetries = options.maxRetries || 3;\r\n    this.timeout = options.timeout || 10000; // ms\r\n    this.logger = options.logger || console;\r\n    this._monitor = null;\r\n    this._intervalId = null;\r\n    \r\n    // Auto-detect environment\r\n    if (typeof window !== 'undefined') {\r\n      this._monitor = new BrowserMonitor(this);\r\n    } else {\r\n      this._monitor = new NodeMonitor(this);\r\n    }\r\n  }\r\n\r\n  async start() {\r\n    if (this._intervalId) {\r\n      this.logger.warn('Monitoring is already running');\r\n      return;\r\n    }\r\n    \r\n    // Initial collection\r\n    await this._collectAndSend();\r\n    \r\n    // Start periodic collection\r\n    this._intervalId = setInterval(\r\n      () => this._collectAndSend(),\r\n      this.interval\r\n    );\r\n    \r\n    this.logger.info(`Started monitoring with ${this.interval}ms interval`);\r\n  }\r\n\r\n  stop() {\r\n    if (!this._intervalId) {\r\n      this.logger.warn('Monitoring is not running');\r\n      return;\r\n    }\r\n    \r\n    clearInterval(this._intervalId);\r\n    this._intervalId = null;\r\n    this.logger.info('Monitoring stopped');\r\n  }\r\n\r\n  async sendOnce() {\r\n    return this._collectAndSend();\r\n  }\r\n\r\n  async _collectAndSend() {\r\n    try {\r\n      const metrics = await this._monitor.collectMetrics();\r\n      if (metrics) {\r\n        await this._sendMetrics(metrics);\r\n      }\r\n    } catch (error) {\r\n      this.logger.error('Error in monitoring cycle:', error);\r\n    }\r\n  }\r\n\r\n  async _sendMetrics(metrics) {\r\n    const payload = {\r\n      server_name: this.serverName,\r\n      metrics,\r\n      system_info: this._monitor.getSystemInfo()\r\n    };\r\n\r\n    const url = `${this.endpoint}/api/sdk/js`;\r\n    \r\n    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\r\n      try {\r\n        const response = await this._fetchWithTimeout(url, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-API-Key': this.apiKey\r\n          },\r\n          body: JSON.stringify(payload)\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n        }\r\n\r\n        this.logger.debug('Metrics sent successfully');\r\n        return true;\r\n      } catch (error) {\r\n        if (attempt === this.maxRetries) {\r\n          this.logger.error(`Failed to send metrics after ${this.maxRetries} attempts:`, error);\r\n          return false;\r\n        }\r\n        \r\n        const delay = Math.min(attempt * 2000, 30000); // Exponential backoff\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n  }\r\n\r\n  async _fetchWithTimeout(url, options) {\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\r\n    \r\n    try {\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        signal: controller.signal\r\n      });\r\n      clearTimeout(timeoutId);\r\n      return response;\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Birdo;"],"names":["BrowserMonitor","constructor","sdk","_systemInfo","_getSystemInfo","platform","userAgent","navigator","screenResolution","window","screen","width","height","language","hardwareConcurrency","deviceMemory","getSystemInfo","collectMetrics","memory","performance","jsHeapSizeLimit","totalJSHeapSize","usedJSHeapSize","timestamp","Date","toISOString","timing","_getTimingMetrics","navigation","_getNavigationMetrics","connection","_getConnectionInfo","error","logger","dns","domainLookupEnd","domainLookupStart","tcp","connectEnd","connectStart","request","responseStart","requestStart","response","responseEnd","domLoading","navigationStart","domInteractive","domComplete","loadEvent","loadEventEnd","loadEventStart","getEntriesByType","type","redirectCount","size","transferSize","duration","mozConnection","webkitConnection","effectiveType","rtt","downlink","saveData","exec","util","promisify","require","NodeMonitor","_prevNetworkStats","_prevDiskStats","os","arch","release","hostname","cpuModel","cpus","model","cpuCores","length","totalMemory","totalmem","nodeVersion","process","version","v8Version","versions","v8","cpu","disk","network","Promise","all","_getCpuMetrics","_getMemoryMetrics","_getDiskMetrics","_getNetworkMetrics","_getProcessMetrics","load","_getLoadMetrics","loadavg","usage","cpuUsage","load1","load5","load15","speed","cores","system","total","free","freemem","used","memoryUsage","heap","getHeapStatistics","stats","fs","statfs","currentStats","read","stdout","now","readRate","timeDiff","blocks","bsize","bfree","warn","networkInterfaces","currentTimestamp","bytesIn","bytesOut","Object","keys","forEach","iface","currentIf","prevIf","curr","i","address","bytesReceived","bytesSent","interfaces","uptime","pid","ppid","avg","Birdo","options","apiKey","serverName","endpoint","interval","maxRetries","timeout","console","_monitor","_intervalId","start","_collectAndSend","setInterval","info","stop","clearInterval","sendOnce","metrics","_sendMetrics","payload","server_name","system_info","url","attempt","_fetchWithTimeout","method","headers","body","JSON","stringify","ok","Error","status","statusText","debug","delay","Math","min","resolve","setTimeout","controller","AbortController","timeoutId","abort","fetch","signal","clearTimeout"],"mappings":"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"}